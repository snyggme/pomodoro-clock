{"version":3,"sources":["components/Control.js","components/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Control","props","handleClick","e","trigger","target","id","incId","onClick","length","react_default","a","createElement","className","name","toLowerCase","replace","style","gridColumn","justifySelf","cursor","decId","fontSize","Timer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","minutes","time","seconds","timerId","handleTimeChange","bind","assertThisInitialized","nextProps","reset","setState","toggle","setInterval","clearTimer","clearInterval","document","getElementById","play","onEndOfSession","startBreak","animation","concat","prevState","twoDigits","src","r","cx","cy","Component","num","App","breakLength","tomatoLength","timerToggle","timerReset","endOfSession","handleStart","handleReset","handleBreakLength","handleTomatoLength","handleEndOfSession","body","countdown","animationPlayState","stroke","currentTime","faClass","Control_Control","components_Timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAEaA,EAAU,SAACC,GACtB,IAAMC,EAAc,SAACC,GACdF,EAAMG,UACLD,EAAEE,OAAOC,KAAOL,EAAMM,MACxBN,EAAMO,QAAQP,EAAMQ,OAAS,GAE7BR,EAAMO,QAAQP,EAAMQ,OAAS,KAGnC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWZ,EAAMa,KAAKC,cAAcC,QAAQ,UAAW,aAC1DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKN,GAAIL,EAAMa,KAAKC,cAAcC,QAAQ,UAAW,UAAWC,MAAO,CAACC,WAAY,QAAQR,EAAAC,EAAAC,cAAA,UAAKX,EAAMa,OACvGJ,EAAAC,EAAAC,cAAA,OAAKJ,QAASN,EAAae,MAAO,CAACE,YAAa,WAAYC,OAAQ,YAAYV,EAAAC,EAAAC,cAAA,KAAGN,GAAIL,EAAMoB,MAAOR,UAAU,4BAC9GH,EAAAC,EAAAC,cAAA,OAAKN,GAAIL,EAAMa,KAAKC,cAAcC,QAAQ,IAAK,KAAMC,MAAO,CAACK,SAAU,SAAUrB,EAAMQ,QACvFC,EAAAC,EAAAC,cAAA,OAAKJ,QAASN,EAAae,MAAO,CAACE,YAAa,aAAcC,OAAQ,YAAYV,EAAAC,EAAAC,cAAA,KAAGN,GAAIL,EAAMM,MAAOM,UAAU,6BCflHU,cACJ,SAAAA,EAAYtB,GAAO,IAAAuB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM1B,KACD8B,MAAQ,CACXC,QAASR,EAAKvB,MAAMgC,KACpBC,QAAS,EACTC,QAAS,GAEXX,EAAKY,iBAAmBZ,EAAKY,iBAAiBC,KAAtBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KAPPA,yFASOe,GACpBZ,KAAK1B,MAAMuC,QAAUD,EAAUC,OACjCb,KAAKc,SAAS,CACZT,QAASO,EAAUN,KACnBC,QAAS,IAGTK,EAAUG,OACe,IAAvBf,KAAKI,MAAMI,SACbR,KAAKc,SAAS,CACZN,QAASQ,YAAYhB,KAAKS,iBAAkB,OAIhDT,KAAKiB,kDAGPC,cAAclB,KAAKI,MAAMI,SACzBR,KAAKc,SAAS,CACZN,QAAS,+CAIX,GAA2B,IAAvBR,KAAKI,MAAMG,SAAwC,IAAvBP,KAAKI,MAAMC,QAMzC,OALAc,SAASC,eAAe,QAAQC,OAEhCrB,KAAKiB,kBACLjB,KAAK1B,MAAMgD,iBAKTtB,KAAK1B,MAAMiD,aACbJ,SAASC,eAAe,aAAa9B,MAAMkC,UAA3C,aAAAC,OAAsF,GAAlBzB,KAAK1B,MAAMgC,KAA/E,qBAEEN,KAAKI,MAAMG,QAAU,EACvBP,KAAKc,SAAS,SAAAY,GAAS,MAAK,CAC1BnB,QAASmB,EAAUnB,QAAU,KAG/BP,KAAKc,SAAS,SAAAY,GAAS,MAAK,CAC1BrB,QAASqB,EAAUrB,QAAU,EAC7BE,QAAS,uCAKb,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKN,GAAG,eAAcI,EAAAC,EAAAC,cAAA,UAAKe,KAAK1B,MAAMa,OACtCJ,EAAAC,EAAAC,cAAA,OAAKN,GAAG,YAAYW,MAAO,CAACK,SAAU,SACnCgC,EAAU3B,KAAKI,MAAMC,SADxB,IACmCsB,EAAU3B,KAAKI,MAAMG,SACtDxB,EAAAC,EAAAC,cAAA,SAAON,GAAG,OAAOiD,IAAI,0FAEvB7C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQN,GAAG,YAAYkD,EAAE,MAAMC,GAAG,MAAMC,GAAG,iBAjEjCC,aAwEdL,EAAY,SAACM,GAAD,OAASA,EAAM,EAAIA,EAAM,IAAMA,GAElCrC,IC4CAsC,qBAlHb,SAAAA,EAAY5D,GAAO,IAAAuB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkC,IACjBrC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoC,GAAA/B,KAAAH,KAAM1B,KACD8B,MAAQ,CACX+B,YAAa,EACbC,aAAc,GACdC,aAAa,EACbC,YAAY,EACZC,cAAc,GAEhB1C,EAAK2C,YAAc3C,EAAK2C,YAAY9B,KAAjBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KACnBA,EAAK4C,YAAc5C,EAAK4C,YAAY/B,KAAjBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KACnBA,EAAK6C,kBAAoB7C,EAAK6C,kBAAkBhC,KAAvBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KACzBA,EAAK8C,mBAAqB9C,EAAK8C,mBAAmBjC,KAAxBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KAC1BA,EAAK+C,mBAAqB/C,EAAK+C,mBAAmBlC,KAAxBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KAbTA,6EAgBjBsB,SAAS0B,KAAKvD,MAAMkC,UAAY,0BAEhC,IAAIsB,EAAY3B,SAASC,eAAe,aAEnCpB,KAAKI,MAAMiC,YAQdS,EAAUxD,MAAMyD,mBAAqB,UAPhC/C,KAAKI,MAAMmC,aAGdO,EAAUxD,MAAMkC,UAAhB,aAAAC,OAAkE,GAAzBzB,KAAKI,MAAM+B,YAApD,oBAFAW,EAAUxD,MAAMkC,UAAhB,aAAAC,OAAmE,GAA1BzB,KAAKI,MAAMgC,aAApD,oBAIFU,EAAUxD,MAAM0D,OAAS,SAK3BhD,KAAKc,SAAS,SAAAY,GAAS,MAAK,CAC1BW,aAAcX,EAAUW,qDAI1BrC,KAAKc,SAAS,SAAAY,GAAS,MAAK,CAC1BS,YAAa,EACbC,aAAc,GACdC,aAAa,EACbE,cAAc,EACdD,YAAaZ,EAAUY,cAEzBnB,SAASC,eAAe,QAAQ6B,YAAc,EAE9C9B,SAAS0B,KAAKvD,MAAMkC,UAAY,wBAEhCL,SAASC,eAAe,aAAa9B,MAAM0D,OAAS,QACpD7B,SAASC,eAAe,aAAa9B,MAAMkC,UAAY,oDAEvC1C,GACZA,GAAU,IAAMA,EAAS,IAC3BqC,SAASC,eAAe,aAAa9B,MAAMkC,UAAY,UAEvDxB,KAAKc,SAAS,SAAAY,GAAS,MAAK,CAC1BS,YAAarD,EACbwD,YAAaZ,EAAUY,0DAIVxD,GACbA,GAAU,IAAMA,EAAS,IAC3BqC,SAASC,eAAe,aAAa9B,MAAMkC,UAAY,UAEvDxB,KAAKc,SAAS,SAAAY,GAAS,MAAK,CAC1BU,aAActD,EACdwD,YAAaZ,EAAUY,4DAKvBtC,KAAKI,MAAMmC,aACbvC,KAAKyC,eAELtB,SAASC,eAAe,aAAa9B,MAAMkC,UAAY,UAEvDxB,KAAKc,SAAS,SAAAY,GAAS,MAAK,CAC1Ba,cAAc,EACdD,YAAaZ,EAAUY,gDAK3B,IAAMnD,EAAOa,KAAKI,MAAMmC,aAAe,QAAU,UAC3CjC,EAAON,KAAKI,MAAMmC,aAAevC,KAAKI,MAAM+B,YAAcnC,KAAKI,MAAMgC,aACrEc,EAAUlD,KAAKI,MAAMiC,YAAc,oBAAsB,mBAC/D,OACEtD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,cAAiCH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAA9C,MACAH,EAAAC,EAAAC,cAACkE,EAAD,CAAShE,KAAK,eACLP,MAAM,kBACNc,MAAM,kBACNjB,QAASuB,KAAKI,MAAMiC,YACpBvD,OAAQkB,KAAKI,MAAM+B,YACnBtD,QAASmB,KAAK0C,oBACvB3D,EAAAC,EAAAC,cAACkE,EAAD,CAAShE,KAAK,iBACLP,MAAM,oBACNc,MAAM,oBACNjB,QAASuB,KAAKI,MAAMiC,YACpBvD,OAAQkB,KAAKI,MAAMgC,aACnBvD,QAASmB,KAAK2C,qBACvB5D,EAAAC,EAAAC,cAACmE,EAAD,CAAQ9C,KAAMA,EACNnB,KAAMA,EACN4B,OAAQf,KAAKI,MAAMiC,YACnBxB,MAAOb,KAAKI,MAAMkC,WAClBhB,eAAgBtB,KAAK4C,mBACrBrB,WAAYvB,KAAKI,MAAMmC,eAC/BxD,EAAAC,EAAAC,cAAA,OAAKJ,QAASmB,KAAKwC,YAAatD,UAAU,MAAMP,GAAG,cAAaI,EAAAC,EAAAC,cAAA,KAAGC,UAAWgE,KAC9EnE,EAAAC,EAAAC,cAAA,OAAKJ,QAASmB,KAAKyC,YAAavD,UAAU,MAAMP,GAAG,SAAQI,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iCA7G9D8C,cCKEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO5E,EAAAC,EAAAC,cAAC2E,EAAD,MAASzC,SAASC,eAAe,SDmH3C,kBAAmByC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.15795e39.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Control = (props) => {\r\n  const handleClick = (e) => {\r\n    if (!props.trigger) {\r\n      if (e.target.id === props.incId)\r\n        props.onClick(props.length + 1)\r\n      else \r\n        props.onClick(props.length - 1)\r\n    } \r\n  }\r\n  return(\r\n    <div className={props.name.toLowerCase().replace(/ length/, '-control')}>\r\n      <div className='control-grid'>\r\n        <div id={props.name.toLowerCase().replace(/ length/, '-label')} style={{gridColumn: '1/4'}}><h2>{props.name}</h2></div>\r\n        <div onClick={handleClick} style={{justifySelf: 'flex-end', cursor: 'pointer'}}><i id={props.decId} className='fa fa-arrow-down fa-2x'/></div>\r\n        <div id={props.name.toLowerCase().replace(/ /, '-')} style={{fontSize: '35px'}}>{props.length}</div>\r\n        <div onClick={handleClick} style={{justifySelf: 'flex-start', cursor: 'pointer'}}><i id={props.incId} className='fa fa-arrow-up fa-2x'/></div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { Component } from 'react'\r\n\r\nclass Timer extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      minutes: this.props.time,\r\n      seconds: 0,\r\n      timerId: 0\r\n    }\r\n    this.handleTimeChange = this.handleTimeChange.bind(this)\r\n  }\r\n  componentWillReceiveProps(nextProps) {\r\n    if (this.props.reset !== nextProps.reset) \r\n      this.setState({\r\n        minutes: nextProps.time,\r\n        seconds: 0\r\n      })\r\n\r\n    if (nextProps.toggle) {\r\n      if (this.state.timerId === 0)\r\n        this.setState({\r\n          timerId: setInterval(this.handleTimeChange, 1000)\r\n        })     \r\n    }\r\n    else \r\n      this.clearTimer()\r\n  }\r\n  clearTimer() {\r\n    clearInterval(this.state.timerId)\r\n    this.setState({\r\n      timerId: 0\r\n    })\r\n  }\r\n  handleTimeChange() {\r\n    if (this.state.seconds === 0 && this.state.minutes === 0) {\r\n      document.getElementById('beep').play()\r\n      \r\n      this.clearTimer()\r\n      this.props.onEndOfSession()\r\n      \r\n      return\r\n    }\r\n    \r\n    if (this.props.startBreak)\r\n      document.getElementById('countdown').style.animation = `countdown ${this.props.time * 60}s linear running`\r\n    \r\n    if (this.state.seconds > 0) {\r\n      this.setState(prevState => ({\r\n        seconds: prevState.seconds - 1\r\n      }))\r\n    } else {\r\n      this.setState(prevState => ({\r\n        minutes: prevState.minutes - 1,\r\n        seconds: 59\r\n      })) \r\n    }      \r\n  }\r\n  render() {\r\n    return(\r\n      <div className='timer-container'>\r\n        <div id='timer-label'><h2>{this.props.name}</h2></div>\r\n        <div id='time-left' style={{fontSize: '80px'}}>\r\n          {twoDigits(this.state.minutes)}:{twoDigits(this.state.seconds)}\r\n          <audio id='beep' src='https://raw.githubusercontent.com/snyggme/m3-solution/master/site/mp3_bank1/beep.mp3'></audio>\r\n        </div>\r\n        <svg> \r\n          <circle id='countdown' r=\"160\" cx=\"165\" cy=\"165\"></circle>\r\n        </svg>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst twoDigits = (num) => num > 9 ? num : '0' + num\r\n\r\nexport default Timer","import React, { Component } from 'react'\r\nimport { Control } from './components/Control'\r\nimport Timer from './components/Timer'\r\nimport './App.scss'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {   \r\n      breakLength: 5,\r\n      tomatoLength: 25,\r\n      timerToggle: false,\r\n      timerReset: false,\r\n      endOfSession: false\r\n    }\r\n    this.handleStart = this.handleStart.bind(this)\r\n    this.handleReset = this.handleReset.bind(this)\r\n    this.handleBreakLength = this.handleBreakLength.bind(this)\r\n    this.handleTomatoLength = this.handleTomatoLength.bind(this)\r\n    this.handleEndOfSession = this.handleEndOfSession.bind(this)\r\n  }\r\n  handleStart() { \r\n    document.body.style.animation = 'colorchange 1s forwards'\r\n\r\n    let countdown = document.getElementById('countdown')\r\n    \r\n    if (!this.state.timerToggle) {\r\n      if (!this.state.endOfSession)\r\n        countdown.style.animation = `countdown ${this.state.tomatoLength * 60}s linear running`\r\n      else\r\n        countdown.style.animation = `countdown ${this.state.breakLength * 60}s linear running`\r\n        \r\n      countdown.style.stroke = 'white'      \r\n    } else {\r\n      countdown.style.animationPlayState = 'paused'\r\n    }\r\n    \r\n    this.setState(prevState => ({\r\n      timerToggle: !prevState.timerToggle\r\n    }))\r\n  } \r\n  handleReset() {\r\n    this.setState(prevState => ({\r\n      breakLength: 5,\r\n      tomatoLength: 25,\r\n      timerToggle: false,\r\n      endOfSession: false,\r\n      timerReset: !prevState.timerReset\r\n    })) \r\n    document.getElementById('beep').currentTime = 0\r\n    \r\n    document.body.style.animation = 'colorback 1s forwards'\r\n    \r\n    document.getElementById('countdown').style.stroke = 'black'\r\n    document.getElementById('countdown').style.animation = 'initial'\r\n  }  \r\n  handleBreakLength(length) {\r\n    if (length <= 60 && length > 0) {\r\n      document.getElementById('countdown').style.animation = 'initial'\r\n\r\n      this.setState(prevState => ({\r\n        breakLength: length,\r\n        timerReset: !prevState.timerReset\r\n      }))\r\n    }     \r\n  }\r\n  handleTomatoLength(length) {\r\n    if (length <= 60 && length > 0) {\r\n      document.getElementById('countdown').style.animation = 'initial'\r\n      \r\n      this.setState(prevState => ({\r\n        tomatoLength: length,\r\n        timerReset: !prevState.timerReset\r\n      }))\r\n    }\r\n  } \r\n  handleEndOfSession() {\r\n    if (this.state.endOfSession)\r\n      this.handleReset()\r\n    else { \r\n      document.getElementById('countdown').style.animation = 'initial'\r\n      \r\n      this.setState(prevState => ({\r\n        endOfSession: true,\r\n        timerReset: !prevState.timerReset\r\n      }))      \r\n    }    \r\n  }\r\n  render() {\r\n    const name = this.state.endOfSession ? 'Break' : 'Session'\r\n    const time = this.state.endOfSession ? this.state.breakLength : this.state.tomatoLength\r\n    const faClass = this.state.timerToggle ? 'fa fa-pause fa-3x' : 'fa fa-play fa-3x' \r\n    return(\r\n      <div className='container'>\r\n        <h1 className='title'>Pomodoro Cl<i className='fa fa-clock-o'/>ck</h1>\r\n        <Control name='Break Length'\r\n                 incId='break-increment'\r\n                 decId='break-decrement'\r\n                 trigger={this.state.timerToggle}\r\n                 length={this.state.breakLength}\r\n                 onClick={this.handleBreakLength}/>\r\n        <Control name='Session Length'\r\n                 incId='session-increment'\r\n                 decId='session-decrement'\r\n                 trigger={this.state.timerToggle}\r\n                 length={this.state.tomatoLength}\r\n                 onClick={this.handleTomatoLength}/>\r\n        <Timer  time={time} \r\n                name={name}\r\n                toggle={this.state.timerToggle}\r\n                reset={this.state.timerReset}                \r\n                onEndOfSession={this.handleEndOfSession}\r\n                startBreak={this.state.endOfSession}/>        \r\n        <div onClick={this.handleStart} className='btn' id='start_stop'><i className={faClass}/></div>\r\n        <div onClick={this.handleReset} className='btn' id='reset'><i className='fa fa-refresh fa-3x'/></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}